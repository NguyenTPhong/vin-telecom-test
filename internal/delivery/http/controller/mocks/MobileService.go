// Code generated by mockery v2.15.0. DO NOT EDIT.

package mocks

import (
	model "vinbigdata/internal/delivery/http/model"

	mock "github.com/stretchr/testify/mock"
)

// MobileService is an autogenerated mock type for the MobileService type
type MobileService struct {
	mock.Mock
}

// GetUserBilling provides a mock function with given fields: userName
func (_m *MobileService) GetUserBilling(userName string) (*model.BillingData, error) {
	ret := _m.Called(userName)

	var r0 *model.BillingData
	if rf, ok := ret.Get(0).(func(string) *model.BillingData); ok {
		r0 = rf(userName)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.BillingData)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(userName)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SaveUserCall provides a mock function with given fields: userName, duration
func (_m *MobileService) SaveUserCall(userName string, duration int64) error {
	ret := _m.Called(userName, duration)

	var r0 error
	if rf, ok := ret.Get(0).(func(string, int64) error); ok {
		r0 = rf(userName, duration)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

type mockConstructorTestingTNewMobileService interface {
	mock.TestingT
	Cleanup(func())
}

// NewMobileService creates a new instance of MobileService. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewMobileService(t mockConstructorTestingTNewMobileService) *MobileService {
	mock := &MobileService{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
